{"version":3,"file":"index.js","sources":["../../../src/addons/use-notification-center/useNotificationCenter.ts"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { toast, ToastItem, Id } from 'react-toastify';\n\ntype Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\nexport interface NotificationCenterItem<Data = {}>\n  extends Optional<ToastItem<Data>, 'content' | 'data'> {\n  read: boolean;\n  createdAt: number;\n}\n\nexport type SortFn<Data> = (\n  l: NotificationCenterItem<Data>,\n  r: NotificationCenterItem<Data>\n) => number;\n\nexport type FilterFn<Data = {}> = (\n  item: NotificationCenterItem<Data>\n) => boolean;\n\nexport interface UseNotificationCenterParams<Data = {}> {\n  /**\n   * initial data to rehydrate the notification center\n   */\n  data?: NotificationCenterItem<Data>[];\n\n  /**\n   * By default, the notifications are sorted from the newest to the oldest using\n   * the `createdAt` field. Use this to provide your own sort function\n   *\n   * Usage:\n   * ```\n   * // old notifications first\n   * useNotificationCenter({\n   *   sort: ((l, r) => l.createdAt - r.createdAt)\n   * })\n   * ```\n   */\n  sort?: SortFn<Data>;\n\n  /**\n   * Keep the toast that meets the condition specified in the callback function.\n   *\n   * Usage:\n   * ```\n   * // keep only the toasts when hidden is set to false\n   * useNotificationCenter({\n   *   filter: item => item.data.hidden === false\n   * })\n   * ```\n   */\n  filter?: FilterFn<Data>;\n}\n\nexport interface UseNotificationCenter<Data> {\n  /**\n   * Contains all the notifications\n   */\n  notifications: NotificationCenterItem<Data>[];\n\n  /**\n   * Clear all notifications\n   */\n  clear(): void;\n\n  /**\n   * Mark all notification as read\n   */\n  markAllAsRead(): void;\n\n  /**\n   * Mark all notification as read or not.\n   *\n   * Usage:\n   * ```\n   * markAllAsRead(false) // mark all notification as not read\n   *\n   * markAllAsRead(true) // same as calling markAllAsRead()\n   * ```\n   */\n  markAllAsRead(read?: boolean): void;\n\n  /**\n   * Mark one or more notifications as read.\n   *\n   * Usage:\n   * ```\n   * markAsRead(\"anId\")\n   * markAsRead([\"a\",\"list\", \"of\", \"id\"])\n   * ```\n   */\n  markAsRead(id: Id | Id[]): void;\n\n  /**\n   * Mark one or more notifications as read.The second parameter let you mark the notificaiton as read or not.\n   *\n   * Usage:\n   * ```\n   * markAsRead(\"anId\", false)\n   * markAsRead([\"a\",\"list\", \"of\", \"id\"], false)\n   *\n   * markAsRead(\"anId\", true) // same as markAsRead(\"anId\")\n   * ```\n   */\n  markAsRead(id: Id | Id[], read?: boolean): void;\n\n  /**\n   * Remove one or more notifications\n   *\n   * Usage:\n   * ```\n   * remove(\"anId\")\n   * remove([\"a\",\"list\", \"of\", \"id\"])\n   * ```\n   */\n  remove(id: Id | Id[]): void;\n\n  /**\n   * Push a notification to the notification center.\n   * Returns null when an item with the given id already exists\n   *\n   * Usage:\n   * ```\n   * const id = add({id: \"id\", content: \"test\", data: { foo: \"hello\" } })\n   *\n   * // Return the id of the notificaiton, generate one if none provided\n   * const id = add({ data: {title: \"a title\", text: \"some text\"} })\n   * ```\n   */\n  add(item: Partial<NotificationCenterItem<Data>>): Id | null;\n\n  /**\n   * Update the notification that match the id\n   * Returns null when no matching notification found\n   *\n   * Usage:\n   * ```\n   * const id = update(\"anId\",  {content: \"test\", data: { foo: \"hello\" } })\n   *\n   * // It's also possible to update the id\n   * const id = update(\"anId\"m { id:\"anotherOne\", data: {title: \"a title\", text: \"some text\"} })\n   * ```\n   */\n  update(id: Id, item: Partial<NotificationCenterItem<Data>>): Id | null;\n\n  /**\n   * Retrive one or more notifications\n   *\n   * Usage:\n   * ```\n   * find(\"anId\")\n   * find([\"a\",\"list\", \"of\", \"id\"])\n   * ```\n   */\n  find(id: Id): NotificationCenterItem<Data> | undefined;\n\n  /**\n   * Retrive one or more notifications\n   *\n   * Usage:\n   * ```\n   * find(\"anId\")\n   * find([\"a\",\"list\", \"of\", \"id\"])\n   * ```\n   */\n  find(id: Id[]): NotificationCenterItem<Data>[] | undefined;\n\n  /**\n   * Retrieve the count for unread notifications\n   */\n  unreadCount: number;\n\n  /**\n   * Sort notifications using the newly provided function\n   *\n   * Usage:\n   * ```\n   * // old notifications first\n   * sort((l, r) => l.createdAt - r.createdAt)\n   * ```\n   */\n  sort(sort: SortFn<Data>): void;\n}\n\nexport function useNotificationCenter<Data = {}>(\n  params: UseNotificationCenterParams<Data> = {}\n): UseNotificationCenter<Data> {\n  const sortFn = useRef(params.sort || defaultSort);\n  const filterFn = useRef(params.filter || null);\n  const [notifications, setNotifications] = useState<\n    NotificationCenterItem<Data>[]\n  >(() => {\n    if (params.data) {\n      return filterFn.current\n        ? params.data.filter(filterFn.current).sort(sortFn.current)\n        : [...params.data].sort(sortFn.current);\n    }\n    return [];\n  });\n  // used to method to be used inside effect without having stale `notifications`\n  const notificationsRef = useRef(notifications);\n\n  useEffect(() => {\n    notificationsRef.current = notifications;\n  }, [notifications]);\n\n  useEffect(() => {\n    return toast.onChange(toast => {\n      if (toast.status === 'added' || toast.status === 'updated') {\n        const newItem = decorate(toast as NotificationCenterItem<Data>);\n        if (filterFn.current && !filterFn.current(newItem)) return;\n\n        setNotifications(prev => {\n          let nextState: NotificationCenterItem<Data>[] = [];\n          const updateIdx = prev.findIndex(v => v.id === newItem.id);\n\n          if (updateIdx !== -1) {\n            nextState = prev.slice();\n            Object.assign(nextState[updateIdx], newItem, {\n              createdAt: Date.now()\n            });\n          } else if (prev.length === 0) {\n            nextState = [newItem];\n          } else {\n            nextState = [newItem, ...prev];\n          }\n          return nextState.sort(sortFn.current);\n        });\n      }\n    });\n  }, []);\n\n  const remove = (id: Id | Id[]) => {\n    setNotifications(prev =>\n      prev.filter(\n        Array.isArray(id) ? v => !id.includes(v.id) : v => v.id !== id\n      )\n    );\n  };\n\n  const clear = () => {\n    setNotifications([]);\n  };\n\n  const markAllAsRead = (read = true) => {\n    setNotifications(prev =>\n      prev.map(v => {\n        v.read = read;\n        return v;\n      })\n    );\n  };\n\n  const markAsRead = (id: Id | Id[], read = true) => {\n    let map = (v: NotificationCenterItem<Data>) => {\n      if (v.id === id) v.read = read;\n      return v;\n    };\n\n    if (Array.isArray(id)) {\n      map = v => {\n        if (id.includes(v.id)) v.read = read;\n        return v;\n      };\n    }\n\n    setNotifications(prev => prev.map(map));\n  };\n\n  const find = (id: Id | Id[]) => {\n    return Array.isArray(id)\n      ? notificationsRef.current.filter(v => id.includes(v.id))\n      : notificationsRef.current.find(v => v.id === id);\n  };\n\n  const add = (item: Partial<NotificationCenterItem<Data>>) => {\n    if (notificationsRef.current.find(v => v.id === item.id)) return null;\n\n    const newItem = decorate(item);\n\n    setNotifications(prev => [...prev, newItem].sort(sortFn.current));\n\n    return newItem.id;\n  };\n\n  const update = (id: Id, item: Partial<NotificationCenterItem<Data>>) => {\n    const index = notificationsRef.current.findIndex(v => v.id === id);\n\n    if (index !== -1) {\n      setNotifications(prev => {\n        const nextState = [...prev];\n        Object.assign(nextState[index], item, {\n          createdAt: item.createdAt || Date.now()\n        });\n\n        return nextState.sort(sortFn.current);\n      });\n\n      return item.id as Id;\n    }\n\n    return null;\n  };\n\n  const sort = (compareFn: SortFn<Data>) => {\n    sortFn.current = compareFn;\n    setNotifications(prev => prev.slice().sort(compareFn));\n  };\n\n  return {\n    notifications,\n    clear,\n    markAllAsRead,\n    markAsRead,\n    add,\n    update,\n    remove,\n    // @ts-ignore fixme: overloading issue\n    find,\n    sort,\n    get unreadCount() {\n      return notifications.reduce(\n        (prev, cur) => (!cur.read ? prev + 1 : prev),\n        0\n      );\n    }\n  };\n}\n\nfunction decorate<Data>(\n  item: NotificationCenterItem<Data> | Partial<NotificationCenterItem<Data>>\n) {\n  if (item.id == null) item.id = Date.now().toString(36).substring(2, 9);\n  if (!item.createdAt) item.createdAt = Date.now();\n  if (item.read == null) item.read = false;\n  return item as NotificationCenterItem<Data>;\n}\n\n// newest to oldest\nfunction defaultSort<Data>(\n  l: NotificationCenterItem<Data>,\n  r: NotificationCenterItem<Data>\n) {\n  return r.createdAt - l.createdAt;\n}\n"],"names":["useNotificationCenter","params","sortFn","useRef","sort","defaultSort","filterFn","filter","notifications","setNotifications","useState","data","current","notificationsRef","useEffect","toast","onChange","status","newItem","decorate","prev","nextState","updateIdx","findIndex","v","id","slice","Object","assign","createdAt","Date","now","length","remove","Array","isArray","includes","clear","markAllAsRead","read","map","markAsRead","find","add","item","update","index","compareFn","unreadCount","reduce","cur","toString","substring","l","r"],"mappings":"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"}